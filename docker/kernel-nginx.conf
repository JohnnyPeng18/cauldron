events { }
http {
  include             /etc/nginx/mime.types;
  default_type        application/octet-stream;
  charset             utf-8;
  keepalive_timeout   65;
  server_tokens       off;
  tcp_nopush          on;
  tcp_nodelay         off;
  port_in_redirect    on;

  server {
    listen              {{ listen_port }};
    server_name         _;

  {% if debug %}
    access_log  /dev/stdout;
    error_log   /dev/stdout debug;
  {% else %}
    access_log  /var/log/nginx/access.log;
    error_log   /var/log/nginx/error.log;
  {% endif %}

    location ~ ^/view(.*)$ {
      # checks for static file, if not found proxy to app.
      root        /cauldron_local/cauldron/resources/web;
      try_files   $uri @proxy_to_app;
    }

    location ~ ^/view/reports/(.+)/(.+)$ {
      # Report data is stored in a more complex fashion than the URL
      # is formatted in. So for that case we have to do a bit of a
      # rewrite in converting to a path.
      root        /root/.cauldron/results;
      try_files   $1/reports/$1/$2 @proxy_to_app;
    }

    location / {
      # This is a hack to make the proxy_to_app named location configuration
      # DRY. It's not ideal but the best I could find. For details:
      #
      # https://serverfault.com/questions/908086/
      # nginx-directly-send-from-location-to-another-named-location/965779
      #
      try_files /dev/null @proxy_to_app;
    }

    location @proxy_to_app {
      proxy_pass         http://127.0.0.1:{{ gunicorn_port }};
      proxy_redirect     off;

      proxy_set_header   Host                 $host;
      proxy_set_header   X-Real-IP            $remote_addr;
      proxy_set_header   X-Forwarded-For      $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Proto    $scheme;
    }
  }
}
